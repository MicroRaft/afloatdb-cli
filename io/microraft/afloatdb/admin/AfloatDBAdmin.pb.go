// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        (unknown)
// source: AfloatDBAdmin.proto

package admin

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	raftendpoint "io.microraft/afloatdb/raftendpoint"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// https://github.com/MicroRaft/MicroRaft/blob/master/microraft/src/main/java/io/microraft/RaftRole.java
type RaftRoleProto int32

const (
	RaftRoleProto_LEADER    RaftRoleProto = 0
	RaftRoleProto_CANDIDATE RaftRoleProto = 1
	RaftRoleProto_FOLLOWER  RaftRoleProto = 2
	RaftRoleProto_LEARNER   RaftRoleProto = 3
)

// Enum value maps for RaftRoleProto.
var (
	RaftRoleProto_name = map[int32]string{
		0: "LEADER",
		1: "CANDIDATE",
		2: "FOLLOWER",
		3: "LEARNER",
	}
	RaftRoleProto_value = map[string]int32{
		"LEADER":    0,
		"CANDIDATE": 1,
		"FOLLOWER":  2,
		"LEARNER":   3,
	}
)

func (x RaftRoleProto) Enum() *RaftRoleProto {
	p := new(RaftRoleProto)
	*p = x
	return p
}

func (x RaftRoleProto) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RaftRoleProto) Descriptor() protoreflect.EnumDescriptor {
	return file_AfloatDBAdmin_proto_enumTypes[0].Descriptor()
}

func (RaftRoleProto) Type() protoreflect.EnumType {
	return &file_AfloatDBAdmin_proto_enumTypes[0]
}

func (x RaftRoleProto) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RaftRoleProto.Descriptor instead.
func (RaftRoleProto) EnumDescriptor() ([]byte, []int) {
	return file_AfloatDBAdmin_proto_rawDescGZIP(), []int{0}
}

// https://github.com/MicroRaft/MicroRaft/blob/master/microraft/src/main/java/io/microraft/report/RaftNodeReport.java
type RaftNodeReportReasonProto int32

const (
	RaftNodeReportReasonProto_STATUS_CHANGE        RaftNodeReportReasonProto = 0
	RaftNodeReportReasonProto_ROLE_CHANGE          RaftNodeReportReasonProto = 1
	RaftNodeReportReasonProto_GROUP_MEMBERS_CHANGE RaftNodeReportReasonProto = 2
	RaftNodeReportReasonProto_TAKE_SNAPSHOT        RaftNodeReportReasonProto = 3
	RaftNodeReportReasonProto_INSTALL_SNAPSHOT     RaftNodeReportReasonProto = 4
	RaftNodeReportReasonProto_PERIODIC             RaftNodeReportReasonProto = 5
	RaftNodeReportReasonProto_API_CALL             RaftNodeReportReasonProto = 6
)

// Enum value maps for RaftNodeReportReasonProto.
var (
	RaftNodeReportReasonProto_name = map[int32]string{
		0: "STATUS_CHANGE",
		1: "ROLE_CHANGE",
		2: "GROUP_MEMBERS_CHANGE",
		3: "TAKE_SNAPSHOT",
		4: "INSTALL_SNAPSHOT",
		5: "PERIODIC",
		6: "API_CALL",
	}
	RaftNodeReportReasonProto_value = map[string]int32{
		"STATUS_CHANGE":        0,
		"ROLE_CHANGE":          1,
		"GROUP_MEMBERS_CHANGE": 2,
		"TAKE_SNAPSHOT":        3,
		"INSTALL_SNAPSHOT":     4,
		"PERIODIC":             5,
		"API_CALL":             6,
	}
)

func (x RaftNodeReportReasonProto) Enum() *RaftNodeReportReasonProto {
	p := new(RaftNodeReportReasonProto)
	*p = x
	return p
}

func (x RaftNodeReportReasonProto) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RaftNodeReportReasonProto) Descriptor() protoreflect.EnumDescriptor {
	return file_AfloatDBAdmin_proto_enumTypes[1].Descriptor()
}

func (RaftNodeReportReasonProto) Type() protoreflect.EnumType {
	return &file_AfloatDBAdmin_proto_enumTypes[1]
}

func (x RaftNodeReportReasonProto) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RaftNodeReportReasonProto.Descriptor instead.
func (RaftNodeReportReasonProto) EnumDescriptor() ([]byte, []int) {
	return file_AfloatDBAdmin_proto_rawDescGZIP(), []int{1}
}

// https://github.com/MicroRaft/MicroRaft/blob/master/microraft/src/main/java/io/microraft/RaftNodeStatus.java
type RaftNodeStatusProto int32

const (
	RaftNodeStatusProto_INITIAL                         RaftNodeStatusProto = 0
	RaftNodeStatusProto_ACTIVE                          RaftNodeStatusProto = 1
	RaftNodeStatusProto_UPDATING_RAFT_GROUP_MEMBER_LIST RaftNodeStatusProto = 2
	RaftNodeStatusProto_TERMINATED                      RaftNodeStatusProto = 3
)

// Enum value maps for RaftNodeStatusProto.
var (
	RaftNodeStatusProto_name = map[int32]string{
		0: "INITIAL",
		1: "ACTIVE",
		2: "UPDATING_RAFT_GROUP_MEMBER_LIST",
		3: "TERMINATED",
	}
	RaftNodeStatusProto_value = map[string]int32{
		"INITIAL":                         0,
		"ACTIVE":                          1,
		"UPDATING_RAFT_GROUP_MEMBER_LIST": 2,
		"TERMINATED":                      3,
	}
)

func (x RaftNodeStatusProto) Enum() *RaftNodeStatusProto {
	p := new(RaftNodeStatusProto)
	*p = x
	return p
}

func (x RaftNodeStatusProto) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RaftNodeStatusProto) Descriptor() protoreflect.EnumDescriptor {
	return file_AfloatDBAdmin_proto_enumTypes[2].Descriptor()
}

func (RaftNodeStatusProto) Type() protoreflect.EnumType {
	return &file_AfloatDBAdmin_proto_enumTypes[2]
}

func (x RaftNodeStatusProto) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RaftNodeStatusProto.Descriptor instead.
func (RaftNodeStatusProto) EnumDescriptor() ([]byte, []int) {
	return file_AfloatDBAdmin_proto_rawDescGZIP(), []int{2}
}

// https://github.com/MicroRaft/MicroRaft/blob/master/microraft/src/main/java/io/microraft/report/RaftGroupMembers.java
type RaftGroupMembersProto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LogIndex int64                             `protobuf:"varint,1,opt,name=logIndex,proto3" json:"logIndex,omitempty"`
	Member   []*raftendpoint.RaftEndpointProto `protobuf:"bytes,2,rep,name=member,proto3" json:"member,omitempty"`
}

func (x *RaftGroupMembersProto) Reset() {
	*x = RaftGroupMembersProto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_AfloatDBAdmin_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RaftGroupMembersProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RaftGroupMembersProto) ProtoMessage() {}

func (x *RaftGroupMembersProto) ProtoReflect() protoreflect.Message {
	mi := &file_AfloatDBAdmin_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RaftGroupMembersProto.ProtoReflect.Descriptor instead.
func (*RaftGroupMembersProto) Descriptor() ([]byte, []int) {
	return file_AfloatDBAdmin_proto_rawDescGZIP(), []int{0}
}

func (x *RaftGroupMembersProto) GetLogIndex() int64 {
	if x != nil {
		return x.LogIndex
	}
	return 0
}

func (x *RaftGroupMembersProto) GetMember() []*raftendpoint.RaftEndpointProto {
	if x != nil {
		return x.Member
	}
	return nil
}

// https://github.com/MicroRaft/MicroRaft/blob/master/microraft/src/main/java/io/microraft/report/RaftTerm.java
type RaftTermProto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Term           int32                           `protobuf:"varint,1,opt,name=term,proto3" json:"term,omitempty"`
	LeaderEndpoint *raftendpoint.RaftEndpointProto `protobuf:"bytes,2,opt,name=leaderEndpoint,proto3" json:"leaderEndpoint,omitempty"`
	VotedEndpoint  *raftendpoint.RaftEndpointProto `protobuf:"bytes,3,opt,name=votedEndpoint,proto3" json:"votedEndpoint,omitempty"`
}

func (x *RaftTermProto) Reset() {
	*x = RaftTermProto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_AfloatDBAdmin_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RaftTermProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RaftTermProto) ProtoMessage() {}

func (x *RaftTermProto) ProtoReflect() protoreflect.Message {
	mi := &file_AfloatDBAdmin_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RaftTermProto.ProtoReflect.Descriptor instead.
func (*RaftTermProto) Descriptor() ([]byte, []int) {
	return file_AfloatDBAdmin_proto_rawDescGZIP(), []int{1}
}

func (x *RaftTermProto) GetTerm() int32 {
	if x != nil {
		return x.Term
	}
	return 0
}

func (x *RaftTermProto) GetLeaderEndpoint() *raftendpoint.RaftEndpointProto {
	if x != nil {
		return x.LeaderEndpoint
	}
	return nil
}

func (x *RaftTermProto) GetVotedEndpoint() *raftendpoint.RaftEndpointProto {
	if x != nil {
		return x.VotedEndpoint
	}
	return nil
}

// https://github.com/MicroRaft/MicroRaft/blob/master/microraft/src/main/java/io/microraft/report/RaftLogStats.java
type RaftLogStatsProto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CommitIndex            int64            `protobuf:"varint,1,opt,name=commitIndex,proto3" json:"commitIndex,omitempty"`
	LastLogOrSnapshotTerm  int64            `protobuf:"varint,2,opt,name=lastLogOrSnapshotTerm,proto3" json:"lastLogOrSnapshotTerm,omitempty"`
	LastLogOrSnapshotIndex int64            `protobuf:"varint,3,opt,name=lastLogOrSnapshotIndex,proto3" json:"lastLogOrSnapshotIndex,omitempty"`
	SnapshotTerm           int64            `protobuf:"varint,4,opt,name=snapshotTerm,proto3" json:"snapshotTerm,omitempty"`
	SnapshotIndex          int64            `protobuf:"varint,5,opt,name=snapshotIndex,proto3" json:"snapshotIndex,omitempty"`
	TakeSnapshotCount      int32            `protobuf:"varint,6,opt,name=takeSnapshotCount,proto3" json:"takeSnapshotCount,omitempty"`
	InstallSnapshotCount   int32            `protobuf:"varint,7,opt,name=installSnapshotCount,proto3" json:"installSnapshotCount,omitempty"`
	FollowerMatchIndex     map[string]int64 `protobuf:"bytes,8,rep,name=followerMatchIndex,proto3" json:"followerMatchIndex,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
}

func (x *RaftLogStatsProto) Reset() {
	*x = RaftLogStatsProto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_AfloatDBAdmin_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RaftLogStatsProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RaftLogStatsProto) ProtoMessage() {}

func (x *RaftLogStatsProto) ProtoReflect() protoreflect.Message {
	mi := &file_AfloatDBAdmin_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RaftLogStatsProto.ProtoReflect.Descriptor instead.
func (*RaftLogStatsProto) Descriptor() ([]byte, []int) {
	return file_AfloatDBAdmin_proto_rawDescGZIP(), []int{2}
}

func (x *RaftLogStatsProto) GetCommitIndex() int64 {
	if x != nil {
		return x.CommitIndex
	}
	return 0
}

func (x *RaftLogStatsProto) GetLastLogOrSnapshotTerm() int64 {
	if x != nil {
		return x.LastLogOrSnapshotTerm
	}
	return 0
}

func (x *RaftLogStatsProto) GetLastLogOrSnapshotIndex() int64 {
	if x != nil {
		return x.LastLogOrSnapshotIndex
	}
	return 0
}

func (x *RaftLogStatsProto) GetSnapshotTerm() int64 {
	if x != nil {
		return x.SnapshotTerm
	}
	return 0
}

func (x *RaftLogStatsProto) GetSnapshotIndex() int64 {
	if x != nil {
		return x.SnapshotIndex
	}
	return 0
}

func (x *RaftLogStatsProto) GetTakeSnapshotCount() int32 {
	if x != nil {
		return x.TakeSnapshotCount
	}
	return 0
}

func (x *RaftLogStatsProto) GetInstallSnapshotCount() int32 {
	if x != nil {
		return x.InstallSnapshotCount
	}
	return 0
}

func (x *RaftLogStatsProto) GetFollowerMatchIndex() map[string]int64 {
	if x != nil {
		return x.FollowerMatchIndex
	}
	return nil
}

// https://github.com/MicroRaft/MicroRaft/blob/master/microraft/src/main/java/io/microraft/report/RaftNodeReport.java
type RaftNodeReportProto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Reason           RaftNodeReportReasonProto       `protobuf:"varint,1,opt,name=reason,proto3,enum=io.afloatdb.admin.proto.RaftNodeReportReasonProto" json:"reason,omitempty"`
	GroupId          string                          `protobuf:"bytes,2,opt,name=groupId,proto3" json:"groupId,omitempty"`
	Endpoint         *raftendpoint.RaftEndpointProto `protobuf:"bytes,3,opt,name=endpoint,proto3" json:"endpoint,omitempty"`
	InitialMembers   *RaftGroupMembersProto          `protobuf:"bytes,4,opt,name=initialMembers,proto3" json:"initialMembers,omitempty"`
	CommittedMembers *RaftGroupMembersProto          `protobuf:"bytes,5,opt,name=committedMembers,proto3" json:"committedMembers,omitempty"`
	EffectiveMembers *RaftGroupMembersProto          `protobuf:"bytes,6,opt,name=effectiveMembers,proto3" json:"effectiveMembers,omitempty"`
	Role             RaftRoleProto                   `protobuf:"varint,7,opt,name=role,proto3,enum=io.afloatdb.admin.proto.RaftRoleProto" json:"role,omitempty"`
	Status           RaftNodeStatusProto             `protobuf:"varint,8,opt,name=status,proto3,enum=io.afloatdb.admin.proto.RaftNodeStatusProto" json:"status,omitempty"`
	Term             *RaftTermProto                  `protobuf:"bytes,9,opt,name=term,proto3" json:"term,omitempty"`
	Log              *RaftLogStatsProto              `protobuf:"bytes,10,opt,name=log,proto3" json:"log,omitempty"`
}

func (x *RaftNodeReportProto) Reset() {
	*x = RaftNodeReportProto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_AfloatDBAdmin_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RaftNodeReportProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RaftNodeReportProto) ProtoMessage() {}

func (x *RaftNodeReportProto) ProtoReflect() protoreflect.Message {
	mi := &file_AfloatDBAdmin_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RaftNodeReportProto.ProtoReflect.Descriptor instead.
func (*RaftNodeReportProto) Descriptor() ([]byte, []int) {
	return file_AfloatDBAdmin_proto_rawDescGZIP(), []int{3}
}

func (x *RaftNodeReportProto) GetReason() RaftNodeReportReasonProto {
	if x != nil {
		return x.Reason
	}
	return RaftNodeReportReasonProto_STATUS_CHANGE
}

func (x *RaftNodeReportProto) GetGroupId() string {
	if x != nil {
		return x.GroupId
	}
	return ""
}

func (x *RaftNodeReportProto) GetEndpoint() *raftendpoint.RaftEndpointProto {
	if x != nil {
		return x.Endpoint
	}
	return nil
}

func (x *RaftNodeReportProto) GetInitialMembers() *RaftGroupMembersProto {
	if x != nil {
		return x.InitialMembers
	}
	return nil
}

func (x *RaftNodeReportProto) GetCommittedMembers() *RaftGroupMembersProto {
	if x != nil {
		return x.CommittedMembers
	}
	return nil
}

func (x *RaftNodeReportProto) GetEffectiveMembers() *RaftGroupMembersProto {
	if x != nil {
		return x.EffectiveMembers
	}
	return nil
}

func (x *RaftNodeReportProto) GetRole() RaftRoleProto {
	if x != nil {
		return x.Role
	}
	return RaftRoleProto_LEADER
}

func (x *RaftNodeReportProto) GetStatus() RaftNodeStatusProto {
	if x != nil {
		return x.Status
	}
	return RaftNodeStatusProto_INITIAL
}

func (x *RaftNodeReportProto) GetTerm() *RaftTermProto {
	if x != nil {
		return x.Term
	}
	return nil
}

func (x *RaftNodeReportProto) GetLog() *RaftLogStatsProto {
	if x != nil {
		return x.Log
	}
	return nil
}

type GetRaftNodeReportRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetRaftNodeReportRequest) Reset() {
	*x = GetRaftNodeReportRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_AfloatDBAdmin_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRaftNodeReportRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRaftNodeReportRequest) ProtoMessage() {}

func (x *GetRaftNodeReportRequest) ProtoReflect() protoreflect.Message {
	mi := &file_AfloatDBAdmin_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRaftNodeReportRequest.ProtoReflect.Descriptor instead.
func (*GetRaftNodeReportRequest) Descriptor() ([]byte, []int) {
	return file_AfloatDBAdmin_proto_rawDescGZIP(), []int{4}
}

type GetRaftNodeReportResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// RaftNodeReport fetched from the RaftNode object running in the contacted
	// AfloatDB instance.
	Report *RaftNodeReportProto `protobuf:"bytes,1,opt,name=report,proto3" json:"report,omitempty"`
	// RaftEndpoint -> address pairs known by a contacted AfloatDB instance.
	EndpointAddress map[string]string `protobuf:"bytes,2,rep,name=endpointAddress,proto3" json:"endpointAddress,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *GetRaftNodeReportResponse) Reset() {
	*x = GetRaftNodeReportResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_AfloatDBAdmin_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRaftNodeReportResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRaftNodeReportResponse) ProtoMessage() {}

func (x *GetRaftNodeReportResponse) ProtoReflect() protoreflect.Message {
	mi := &file_AfloatDBAdmin_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRaftNodeReportResponse.ProtoReflect.Descriptor instead.
func (*GetRaftNodeReportResponse) Descriptor() ([]byte, []int) {
	return file_AfloatDBAdmin_proto_rawDescGZIP(), []int{5}
}

func (x *GetRaftNodeReportResponse) GetReport() *RaftNodeReportProto {
	if x != nil {
		return x.Report
	}
	return nil
}

func (x *GetRaftNodeReportResponse) GetEndpointAddress() map[string]string {
	if x != nil {
		return x.EndpointAddress
	}
	return nil
}

type AddRaftEndpointAddressRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// RaftEndpoint for which the address is going to be specified.
	Endpoint *raftendpoint.RaftEndpointProto `protobuf:"bytes,1,opt,name=endpoint,proto3" json:"endpoint,omitempty"`
	// Address of the RaftEndpoint which will be used by AfloatDB instances to
	// communicate for that RaftEndpoint.
	Address string `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"`
}

func (x *AddRaftEndpointAddressRequest) Reset() {
	*x = AddRaftEndpointAddressRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_AfloatDBAdmin_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddRaftEndpointAddressRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddRaftEndpointAddressRequest) ProtoMessage() {}

func (x *AddRaftEndpointAddressRequest) ProtoReflect() protoreflect.Message {
	mi := &file_AfloatDBAdmin_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddRaftEndpointAddressRequest.ProtoReflect.Descriptor instead.
func (*AddRaftEndpointAddressRequest) Descriptor() ([]byte, []int) {
	return file_AfloatDBAdmin_proto_rawDescGZIP(), []int{6}
}

func (x *AddRaftEndpointAddressRequest) GetEndpoint() *raftendpoint.RaftEndpointProto {
	if x != nil {
		return x.Endpoint
	}
	return nil
}

func (x *AddRaftEndpointAddressRequest) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

type AddRaftEndpointAddressResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *AddRaftEndpointAddressResponse) Reset() {
	*x = AddRaftEndpointAddressResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_AfloatDBAdmin_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddRaftEndpointAddressResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddRaftEndpointAddressResponse) ProtoMessage() {}

func (x *AddRaftEndpointAddressResponse) ProtoReflect() protoreflect.Message {
	mi := &file_AfloatDBAdmin_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddRaftEndpointAddressResponse.ProtoReflect.Descriptor instead.
func (*AddRaftEndpointAddressResponse) Descriptor() ([]byte, []int) {
	return file_AfloatDBAdmin_proto_rawDescGZIP(), []int{7}
}

type AddRaftEndpointRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Endpoint                *raftendpoint.RaftEndpointProto `protobuf:"bytes,1,opt,name=endpoint,proto3" json:"endpoint,omitempty"`
	VotingMember            bool                            `protobuf:"varint,2,opt,name=votingMember,proto3" json:"votingMember,omitempty"`
	GroupMembersCommitIndex int64                           `protobuf:"varint,3,opt,name=groupMembersCommitIndex,proto3" json:"groupMembersCommitIndex,omitempty"`
}

func (x *AddRaftEndpointRequest) Reset() {
	*x = AddRaftEndpointRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_AfloatDBAdmin_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddRaftEndpointRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddRaftEndpointRequest) ProtoMessage() {}

func (x *AddRaftEndpointRequest) ProtoReflect() protoreflect.Message {
	mi := &file_AfloatDBAdmin_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddRaftEndpointRequest.ProtoReflect.Descriptor instead.
func (*AddRaftEndpointRequest) Descriptor() ([]byte, []int) {
	return file_AfloatDBAdmin_proto_rawDescGZIP(), []int{8}
}

func (x *AddRaftEndpointRequest) GetEndpoint() *raftendpoint.RaftEndpointProto {
	if x != nil {
		return x.Endpoint
	}
	return nil
}

func (x *AddRaftEndpointRequest) GetVotingMember() bool {
	if x != nil {
		return x.VotingMember
	}
	return false
}

func (x *AddRaftEndpointRequest) GetGroupMembersCommitIndex() int64 {
	if x != nil {
		return x.GroupMembersCommitIndex
	}
	return 0
}

type AddRaftEndpointResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GroupMembersCommitIndex int64 `protobuf:"varint,1,opt,name=groupMembersCommitIndex,proto3" json:"groupMembersCommitIndex,omitempty"`
}

func (x *AddRaftEndpointResponse) Reset() {
	*x = AddRaftEndpointResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_AfloatDBAdmin_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddRaftEndpointResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddRaftEndpointResponse) ProtoMessage() {}

func (x *AddRaftEndpointResponse) ProtoReflect() protoreflect.Message {
	mi := &file_AfloatDBAdmin_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddRaftEndpointResponse.ProtoReflect.Descriptor instead.
func (*AddRaftEndpointResponse) Descriptor() ([]byte, []int) {
	return file_AfloatDBAdmin_proto_rawDescGZIP(), []int{9}
}

func (x *AddRaftEndpointResponse) GetGroupMembersCommitIndex() int64 {
	if x != nil {
		return x.GroupMembersCommitIndex
	}
	return 0
}

type RemoveRaftEndpointRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Endpoint                *raftendpoint.RaftEndpointProto `protobuf:"bytes,1,opt,name=endpoint,proto3" json:"endpoint,omitempty"`
	GroupMembersCommitIndex int64                           `protobuf:"varint,2,opt,name=groupMembersCommitIndex,proto3" json:"groupMembersCommitIndex,omitempty"`
}

func (x *RemoveRaftEndpointRequest) Reset() {
	*x = RemoveRaftEndpointRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_AfloatDBAdmin_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveRaftEndpointRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveRaftEndpointRequest) ProtoMessage() {}

func (x *RemoveRaftEndpointRequest) ProtoReflect() protoreflect.Message {
	mi := &file_AfloatDBAdmin_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveRaftEndpointRequest.ProtoReflect.Descriptor instead.
func (*RemoveRaftEndpointRequest) Descriptor() ([]byte, []int) {
	return file_AfloatDBAdmin_proto_rawDescGZIP(), []int{10}
}

func (x *RemoveRaftEndpointRequest) GetEndpoint() *raftendpoint.RaftEndpointProto {
	if x != nil {
		return x.Endpoint
	}
	return nil
}

func (x *RemoveRaftEndpointRequest) GetGroupMembersCommitIndex() int64 {
	if x != nil {
		return x.GroupMembersCommitIndex
	}
	return 0
}

type RemoveRaftEndpointResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GroupMembersCommitIndex int64 `protobuf:"varint,1,opt,name=groupMembersCommitIndex,proto3" json:"groupMembersCommitIndex,omitempty"`
}

func (x *RemoveRaftEndpointResponse) Reset() {
	*x = RemoveRaftEndpointResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_AfloatDBAdmin_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveRaftEndpointResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveRaftEndpointResponse) ProtoMessage() {}

func (x *RemoveRaftEndpointResponse) ProtoReflect() protoreflect.Message {
	mi := &file_AfloatDBAdmin_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveRaftEndpointResponse.ProtoReflect.Descriptor instead.
func (*RemoveRaftEndpointResponse) Descriptor() ([]byte, []int) {
	return file_AfloatDBAdmin_proto_rawDescGZIP(), []int{11}
}

func (x *RemoveRaftEndpointResponse) GetGroupMembersCommitIndex() int64 {
	if x != nil {
		return x.GroupMembersCommitIndex
	}
	return 0
}

type TakeSnapshotRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *TakeSnapshotRequest) Reset() {
	*x = TakeSnapshotRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_AfloatDBAdmin_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TakeSnapshotRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TakeSnapshotRequest) ProtoMessage() {}

func (x *TakeSnapshotRequest) ProtoReflect() protoreflect.Message {
	mi := &file_AfloatDBAdmin_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TakeSnapshotRequest.ProtoReflect.Descriptor instead.
func (*TakeSnapshotRequest) Descriptor() ([]byte, []int) {
	return file_AfloatDBAdmin_proto_rawDescGZIP(), []int{12}
}

type TakeSnapshotResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// RaftNodeReport fetched from the RaftNode object running in the contacted
	// AfloatDB instance.
	Report *RaftNodeReportProto `protobuf:"bytes,1,opt,name=report,proto3" json:"report,omitempty"`
}

func (x *TakeSnapshotResponse) Reset() {
	*x = TakeSnapshotResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_AfloatDBAdmin_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TakeSnapshotResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TakeSnapshotResponse) ProtoMessage() {}

func (x *TakeSnapshotResponse) ProtoReflect() protoreflect.Message {
	mi := &file_AfloatDBAdmin_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TakeSnapshotResponse.ProtoReflect.Descriptor instead.
func (*TakeSnapshotResponse) Descriptor() ([]byte, []int) {
	return file_AfloatDBAdmin_proto_rawDescGZIP(), []int{13}
}

func (x *TakeSnapshotResponse) GetReport() *RaftNodeReportProto {
	if x != nil {
		return x.Report
	}
	return nil
}

var File_AfloatDBAdmin_proto protoreflect.FileDescriptor

var file_AfloatDBAdmin_proto_rawDesc = []byte{
	0x0a, 0x13, 0x41, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x44, 0x42, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x17, 0x69, 0x6f, 0x2e, 0x61, 0x66, 0x6c, 0x6f, 0x61, 0x74,
	0x64, 0x62, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x12,
	0x52, 0x61, 0x66, 0x74, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x22, 0x76, 0x0a, 0x15, 0x52, 0x61, 0x66, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d,
	0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x1a, 0x0a, 0x08, 0x6c,
	0x6f, 0x67, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x6c,
	0x6f, 0x67, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x41, 0x0a, 0x06, 0x6d, 0x65, 0x6d, 0x62, 0x65,
	0x72, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x69, 0x6f, 0x2e, 0x61, 0x66, 0x6c,
	0x6f, 0x61, 0x74, 0x64, 0x62, 0x2e, 0x72, 0x61, 0x66, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x52, 0x61, 0x66, 0x74, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x52, 0x06, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x22, 0xc7, 0x01, 0x0a, 0x0d, 0x52,
	0x61, 0x66, 0x74, 0x54, 0x65, 0x72, 0x6d, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x12, 0x0a, 0x04,
	0x74, 0x65, 0x72, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x74, 0x65, 0x72, 0x6d,
	0x12, 0x51, 0x0a, 0x0e, 0x6c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x69, 0x6f, 0x2e, 0x61, 0x66,
	0x6c, 0x6f, 0x61, 0x74, 0x64, 0x62, 0x2e, 0x72, 0x61, 0x66, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x52, 0x61, 0x66, 0x74, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x52, 0x0e, 0x6c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x45, 0x6e, 0x64, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x12, 0x4f, 0x0a, 0x0d, 0x76, 0x6f, 0x74, 0x65, 0x64, 0x45, 0x6e, 0x64, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x69, 0x6f, 0x2e,
	0x61, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x64, 0x62, 0x2e, 0x72, 0x61, 0x66, 0x74, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x61, 0x66, 0x74, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x0d, 0x76, 0x6f, 0x74, 0x65, 0x64, 0x45, 0x6e, 0x64, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x22, 0x8a, 0x04, 0x0a, 0x11, 0x52, 0x61, 0x66, 0x74, 0x4c, 0x6f, 0x67,
	0x53, 0x74, 0x61, 0x74, 0x73, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6f,
	0x6d, 0x6d, 0x69, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0b, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x34, 0x0a, 0x15,
	0x6c, 0x61, 0x73, 0x74, 0x4c, 0x6f, 0x67, 0x4f, 0x72, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f,
	0x74, 0x54, 0x65, 0x72, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x15, 0x6c, 0x61, 0x73,
	0x74, 0x4c, 0x6f, 0x67, 0x4f, 0x72, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x54, 0x65,
	0x72, 0x6d, 0x12, 0x36, 0x0a, 0x16, 0x6c, 0x61, 0x73, 0x74, 0x4c, 0x6f, 0x67, 0x4f, 0x72, 0x53,
	0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x16, 0x6c, 0x61, 0x73, 0x74, 0x4c, 0x6f, 0x67, 0x4f, 0x72, 0x53, 0x6e, 0x61,
	0x70, 0x73, 0x68, 0x6f, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x22, 0x0a, 0x0c, 0x73, 0x6e,
	0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x54, 0x65, 0x72, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0c, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x54, 0x65, 0x72, 0x6d, 0x12, 0x24,
	0x0a, 0x0d, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x49,
	0x6e, 0x64, 0x65, 0x78, 0x12, 0x2c, 0x0a, 0x11, 0x74, 0x61, 0x6b, 0x65, 0x53, 0x6e, 0x61, 0x70,
	0x73, 0x68, 0x6f, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x11, 0x74, 0x61, 0x6b, 0x65, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x32, 0x0a, 0x14, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x53, 0x6e, 0x61,
	0x70, 0x73, 0x68, 0x6f, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x14, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f,
	0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x72, 0x0a, 0x12, 0x66, 0x6f, 0x6c, 0x6c, 0x6f, 0x77,
	0x65, 0x72, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x08, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x42, 0x2e, 0x69, 0x6f, 0x2e, 0x61, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x64, 0x62,
	0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x61, 0x66,
	0x74, 0x4c, 0x6f, 0x67, 0x53, 0x74, 0x61, 0x74, 0x73, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x46,
	0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x49, 0x6e, 0x64, 0x65,
	0x78, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x12, 0x66, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x72,
	0x4d, 0x61, 0x74, 0x63, 0x68, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x1a, 0x45, 0x0a, 0x17, 0x46, 0x6f,
	0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x49, 0x6e, 0x64, 0x65, 0x78,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x22, 0xce, 0x05, 0x0a, 0x13, 0x52, 0x61, 0x66, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x4a, 0x0a, 0x06, 0x72, 0x65, 0x61,
	0x73, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x32, 0x2e, 0x69, 0x6f, 0x2e, 0x61,
	0x66, 0x6c, 0x6f, 0x61, 0x74, 0x64, 0x62, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x61, 0x66, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x06, 0x72,
	0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12,
	0x45, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x29, 0x2e, 0x69, 0x6f, 0x2e, 0x61, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x64, 0x62, 0x2e,
	0x72, 0x61, 0x66, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x61, 0x66, 0x74, 0x45,
	0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x08, 0x65, 0x6e,
	0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x56, 0x0a, 0x0e, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61,
	0x6c, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e,
	0x2e, 0x69, 0x6f, 0x2e, 0x61, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x64, 0x62, 0x2e, 0x61, 0x64, 0x6d,
	0x69, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x61, 0x66, 0x74, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x0e,
	0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x12, 0x5a,
	0x0a, 0x10, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x64, 0x4d, 0x65, 0x6d, 0x62, 0x65,
	0x72, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x69, 0x6f, 0x2e, 0x61, 0x66,
	0x6c, 0x6f, 0x61, 0x74, 0x64, 0x62, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x52, 0x61, 0x66, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x65, 0x6d, 0x62,
	0x65, 0x72, 0x73, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x10, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74,
	0x74, 0x65, 0x64, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x12, 0x5a, 0x0a, 0x10, 0x65, 0x66,
	0x66, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x69, 0x6f, 0x2e, 0x61, 0x66, 0x6c, 0x6f, 0x61, 0x74,
	0x64, 0x62, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52,
	0x61, 0x66, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x52, 0x10, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x4d,
	0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x12, 0x3a, 0x0a, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x26, 0x2e, 0x69, 0x6f, 0x2e, 0x61, 0x66, 0x6c, 0x6f, 0x61, 0x74,
	0x64, 0x62, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52,
	0x61, 0x66, 0x74, 0x52, 0x6f, 0x6c, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x04, 0x72, 0x6f,
	0x6c, 0x65, 0x12, 0x44, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x2c, 0x2e, 0x69, 0x6f, 0x2e, 0x61, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x64, 0x62,
	0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x61, 0x66,
	0x74, 0x4e, 0x6f, 0x64, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x3a, 0x0a, 0x04, 0x74, 0x65, 0x72, 0x6d,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x69, 0x6f, 0x2e, 0x61, 0x66, 0x6c, 0x6f,
	0x61, 0x74, 0x64, 0x62, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x52, 0x61, 0x66, 0x74, 0x54, 0x65, 0x72, 0x6d, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x04,
	0x74, 0x65, 0x72, 0x6d, 0x12, 0x3c, 0x0a, 0x03, 0x6c, 0x6f, 0x67, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2a, 0x2e, 0x69, 0x6f, 0x2e, 0x61, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x64, 0x62, 0x2e,
	0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x61, 0x66, 0x74,
	0x4c, 0x6f, 0x67, 0x53, 0x74, 0x61, 0x74, 0x73, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x03, 0x6c,
	0x6f, 0x67, 0x22, 0x1a, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x52, 0x61, 0x66, 0x74, 0x4e, 0x6f, 0x64,
	0x65, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x98,
	0x02, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x52, 0x61, 0x66, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x44, 0x0a, 0x06,
	0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x69,
	0x6f, 0x2e, 0x61, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x64, 0x62, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x61, 0x66, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x52,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x06, 0x72, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x12, 0x71, 0x0a, 0x0f, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x47, 0x2e, 0x69, 0x6f,
	0x2e, 0x61, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x64, 0x62, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x61, 0x66, 0x74, 0x4e, 0x6f, 0x64,
	0x65, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e,
	0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x0f, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x1a, 0x42, 0x0a, 0x14, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x80, 0x01, 0x0a, 0x1d, 0x41, 0x64,
	0x64, 0x52, 0x61, 0x66, 0x74, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x45, 0x0a, 0x08, 0x65,
	0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e,
	0x69, 0x6f, 0x2e, 0x61, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x64, 0x62, 0x2e, 0x72, 0x61, 0x66, 0x74,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x61, 0x66, 0x74, 0x45, 0x6e, 0x64, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x08, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0x20, 0x0a, 0x1e,
	0x41, 0x64, 0x64, 0x52, 0x61, 0x66, 0x74, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xbd,
	0x01, 0x0a, 0x16, 0x41, 0x64, 0x64, 0x52, 0x61, 0x66, 0x74, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x45, 0x0a, 0x08, 0x65, 0x6e, 0x64,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x69, 0x6f,
	0x2e, 0x61, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x64, 0x62, 0x2e, 0x72, 0x61, 0x66, 0x74, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x61, 0x66, 0x74, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x08, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x12, 0x22, 0x0a, 0x0c, 0x76, 0x6f, 0x74, 0x69, 0x6e, 0x67, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x76, 0x6f, 0x74, 0x69, 0x6e, 0x67, 0x4d, 0x65,
	0x6d, 0x62, 0x65, 0x72, 0x12, 0x38, 0x0a, 0x17, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x65, 0x6d,
	0x62, 0x65, 0x72, 0x73, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x17, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x65, 0x6d, 0x62,
	0x65, 0x72, 0x73, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x22, 0x53,
	0x0a, 0x17, 0x41, 0x64, 0x64, 0x52, 0x61, 0x66, 0x74, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x38, 0x0a, 0x17, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x49,
	0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x17, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x49, 0x6e,
	0x64, 0x65, 0x78, 0x22, 0x9c, 0x01, 0x0a, 0x19, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x52, 0x61,
	0x66, 0x74, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x45, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x69, 0x6f, 0x2e, 0x61, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x64,
	0x62, 0x2e, 0x72, 0x61, 0x66, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x61, 0x66,
	0x74, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x08,
	0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x38, 0x0a, 0x17, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x49, 0x6e,
	0x64, 0x65, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x17, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x49, 0x6e, 0x64,
	0x65, 0x78, 0x22, 0x56, 0x0a, 0x1a, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x52, 0x61, 0x66, 0x74,
	0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x38, 0x0a, 0x17, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73,
	0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x17, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x43,
	0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x22, 0x15, 0x0a, 0x13, 0x54, 0x61,
	0x6b, 0x65, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x22, 0x5c, 0x0a, 0x14, 0x54, 0x61, 0x6b, 0x65, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x44, 0x0a, 0x06, 0x72, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x69, 0x6f, 0x2e, 0x61,
	0x66, 0x6c, 0x6f, 0x61, 0x74, 0x64, 0x62, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x61, 0x66, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x06, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2a,
	0x45, 0x0a, 0x0d, 0x52, 0x61, 0x66, 0x74, 0x52, 0x6f, 0x6c, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x0a, 0x0a, 0x06, 0x4c, 0x45, 0x41, 0x44, 0x45, 0x52, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09,
	0x43, 0x41, 0x4e, 0x44, 0x49, 0x44, 0x41, 0x54, 0x45, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x46,
	0x4f, 0x4c, 0x4c, 0x4f, 0x57, 0x45, 0x52, 0x10, 0x02, 0x12, 0x0b, 0x0a, 0x07, 0x4c, 0x45, 0x41,
	0x52, 0x4e, 0x45, 0x52, 0x10, 0x03, 0x2a, 0x9e, 0x01, 0x0a, 0x19, 0x52, 0x61, 0x66, 0x74, 0x4e,
	0x6f, 0x64, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x11, 0x0a, 0x0d, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x43,
	0x48, 0x41, 0x4e, 0x47, 0x45, 0x10, 0x00, 0x12, 0x0f, 0x0a, 0x0b, 0x52, 0x4f, 0x4c, 0x45, 0x5f,
	0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x10, 0x01, 0x12, 0x18, 0x0a, 0x14, 0x47, 0x52, 0x4f, 0x55,
	0x50, 0x5f, 0x4d, 0x45, 0x4d, 0x42, 0x45, 0x52, 0x53, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45,
	0x10, 0x02, 0x12, 0x11, 0x0a, 0x0d, 0x54, 0x41, 0x4b, 0x45, 0x5f, 0x53, 0x4e, 0x41, 0x50, 0x53,
	0x48, 0x4f, 0x54, 0x10, 0x03, 0x12, 0x14, 0x0a, 0x10, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x4c, 0x4c,
	0x5f, 0x53, 0x4e, 0x41, 0x50, 0x53, 0x48, 0x4f, 0x54, 0x10, 0x04, 0x12, 0x0c, 0x0a, 0x08, 0x50,
	0x45, 0x52, 0x49, 0x4f, 0x44, 0x49, 0x43, 0x10, 0x05, 0x12, 0x0c, 0x0a, 0x08, 0x41, 0x50, 0x49,
	0x5f, 0x43, 0x41, 0x4c, 0x4c, 0x10, 0x06, 0x2a, 0x63, 0x0a, 0x13, 0x52, 0x61, 0x66, 0x74, 0x4e,
	0x6f, 0x64, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0b,
	0x0a, 0x07, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x41,
	0x43, 0x54, 0x49, 0x56, 0x45, 0x10, 0x01, 0x12, 0x23, 0x0a, 0x1f, 0x55, 0x50, 0x44, 0x41, 0x54,
	0x49, 0x4e, 0x47, 0x5f, 0x52, 0x41, 0x46, 0x54, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x4d,
	0x45, 0x4d, 0x42, 0x45, 0x52, 0x5f, 0x4c, 0x49, 0x53, 0x54, 0x10, 0x02, 0x12, 0x0e, 0x0a, 0x0a,
	0x54, 0x45, 0x52, 0x4d, 0x49, 0x4e, 0x41, 0x54, 0x45, 0x44, 0x10, 0x03, 0x32, 0x82, 0x05, 0x0a,
	0x0c, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x7c, 0x0a,
	0x11, 0x67, 0x65, 0x74, 0x52, 0x61, 0x66, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x12, 0x31, 0x2e, 0x69, 0x6f, 0x2e, 0x61, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x64, 0x62,
	0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x65, 0x74,
	0x52, 0x61, 0x66, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x32, 0x2e, 0x69, 0x6f, 0x2e, 0x61, 0x66, 0x6c, 0x6f, 0x61,
	0x74, 0x64, 0x62, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x47, 0x65, 0x74, 0x52, 0x61, 0x66, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x8b, 0x01, 0x0a, 0x16,
	0x61, 0x64, 0x64, 0x52, 0x61, 0x66, 0x74, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x36, 0x2e, 0x69, 0x6f, 0x2e, 0x61, 0x66, 0x6c, 0x6f,
	0x61, 0x74, 0x64, 0x62, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x41, 0x64, 0x64, 0x52, 0x61, 0x66, 0x74, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x37,
	0x2e, 0x69, 0x6f, 0x2e, 0x61, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x64, 0x62, 0x2e, 0x61, 0x64, 0x6d,
	0x69, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x64, 0x64, 0x52, 0x61, 0x66, 0x74,
	0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x76, 0x0a, 0x0f, 0x61, 0x64, 0x64,
	0x52, 0x61, 0x66, 0x74, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x2f, 0x2e, 0x69,
	0x6f, 0x2e, 0x61, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x64, 0x62, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x64, 0x64, 0x52, 0x61, 0x66, 0x74, 0x45, 0x6e,
	0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x30, 0x2e,
	0x69, 0x6f, 0x2e, 0x61, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x64, 0x62, 0x2e, 0x61, 0x64, 0x6d, 0x69,
	0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x64, 0x64, 0x52, 0x61, 0x66, 0x74, 0x45,
	0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x12, 0x7f, 0x0a, 0x12, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x52, 0x61, 0x66, 0x74, 0x45,
	0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x32, 0x2e, 0x69, 0x6f, 0x2e, 0x61, 0x66, 0x6c,
	0x6f, 0x61, 0x74, 0x64, 0x62, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x52, 0x61, 0x66, 0x74, 0x45, 0x6e, 0x64, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x33, 0x2e, 0x69, 0x6f,
	0x2e, 0x61, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x64, 0x62, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x52, 0x61, 0x66, 0x74,
	0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0x6d, 0x0a, 0x0c, 0x74, 0x61, 0x6b, 0x65, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68,
	0x6f, 0x74, 0x12, 0x2c, 0x2e, 0x69, 0x6f, 0x2e, 0x61, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x64, 0x62,
	0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x61, 0x6b,
	0x65, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x2d, 0x2e, 0x69, 0x6f, 0x2e, 0x61, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x64, 0x62, 0x2e, 0x61,
	0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x61, 0x6b, 0x65, 0x53,
	0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x42, 0x1f, 0x50, 0x01, 0x5a, 0x1b, 0x69, 0x6f, 0x2e, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x72,
	0x61, 0x66, 0x74, 0x2f, 0x61, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x64, 0x62, 0x2f, 0x61, 0x64, 0x6d,
	0x69, 0x6e, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_AfloatDBAdmin_proto_rawDescOnce sync.Once
	file_AfloatDBAdmin_proto_rawDescData = file_AfloatDBAdmin_proto_rawDesc
)

func file_AfloatDBAdmin_proto_rawDescGZIP() []byte {
	file_AfloatDBAdmin_proto_rawDescOnce.Do(func() {
		file_AfloatDBAdmin_proto_rawDescData = protoimpl.X.CompressGZIP(file_AfloatDBAdmin_proto_rawDescData)
	})
	return file_AfloatDBAdmin_proto_rawDescData
}

var file_AfloatDBAdmin_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_AfloatDBAdmin_proto_msgTypes = make([]protoimpl.MessageInfo, 16)
var file_AfloatDBAdmin_proto_goTypes = []interface{}{
	(RaftRoleProto)(0),                     // 0: io.afloatdb.admin.proto.RaftRoleProto
	(RaftNodeReportReasonProto)(0),         // 1: io.afloatdb.admin.proto.RaftNodeReportReasonProto
	(RaftNodeStatusProto)(0),               // 2: io.afloatdb.admin.proto.RaftNodeStatusProto
	(*RaftGroupMembersProto)(nil),          // 3: io.afloatdb.admin.proto.RaftGroupMembersProto
	(*RaftTermProto)(nil),                  // 4: io.afloatdb.admin.proto.RaftTermProto
	(*RaftLogStatsProto)(nil),              // 5: io.afloatdb.admin.proto.RaftLogStatsProto
	(*RaftNodeReportProto)(nil),            // 6: io.afloatdb.admin.proto.RaftNodeReportProto
	(*GetRaftNodeReportRequest)(nil),       // 7: io.afloatdb.admin.proto.GetRaftNodeReportRequest
	(*GetRaftNodeReportResponse)(nil),      // 8: io.afloatdb.admin.proto.GetRaftNodeReportResponse
	(*AddRaftEndpointAddressRequest)(nil),  // 9: io.afloatdb.admin.proto.AddRaftEndpointAddressRequest
	(*AddRaftEndpointAddressResponse)(nil), // 10: io.afloatdb.admin.proto.AddRaftEndpointAddressResponse
	(*AddRaftEndpointRequest)(nil),         // 11: io.afloatdb.admin.proto.AddRaftEndpointRequest
	(*AddRaftEndpointResponse)(nil),        // 12: io.afloatdb.admin.proto.AddRaftEndpointResponse
	(*RemoveRaftEndpointRequest)(nil),      // 13: io.afloatdb.admin.proto.RemoveRaftEndpointRequest
	(*RemoveRaftEndpointResponse)(nil),     // 14: io.afloatdb.admin.proto.RemoveRaftEndpointResponse
	(*TakeSnapshotRequest)(nil),            // 15: io.afloatdb.admin.proto.TakeSnapshotRequest
	(*TakeSnapshotResponse)(nil),           // 16: io.afloatdb.admin.proto.TakeSnapshotResponse
	nil,                                    // 17: io.afloatdb.admin.proto.RaftLogStatsProto.FollowerMatchIndexEntry
	nil,                                    // 18: io.afloatdb.admin.proto.GetRaftNodeReportResponse.EndpointAddressEntry
	(*raftendpoint.RaftEndpointProto)(nil), // 19: io.afloatdb.raft.proto.RaftEndpointProto
}
var file_AfloatDBAdmin_proto_depIdxs = []int32{
	19, // 0: io.afloatdb.admin.proto.RaftGroupMembersProto.member:type_name -> io.afloatdb.raft.proto.RaftEndpointProto
	19, // 1: io.afloatdb.admin.proto.RaftTermProto.leaderEndpoint:type_name -> io.afloatdb.raft.proto.RaftEndpointProto
	19, // 2: io.afloatdb.admin.proto.RaftTermProto.votedEndpoint:type_name -> io.afloatdb.raft.proto.RaftEndpointProto
	17, // 3: io.afloatdb.admin.proto.RaftLogStatsProto.followerMatchIndex:type_name -> io.afloatdb.admin.proto.RaftLogStatsProto.FollowerMatchIndexEntry
	1,  // 4: io.afloatdb.admin.proto.RaftNodeReportProto.reason:type_name -> io.afloatdb.admin.proto.RaftNodeReportReasonProto
	19, // 5: io.afloatdb.admin.proto.RaftNodeReportProto.endpoint:type_name -> io.afloatdb.raft.proto.RaftEndpointProto
	3,  // 6: io.afloatdb.admin.proto.RaftNodeReportProto.initialMembers:type_name -> io.afloatdb.admin.proto.RaftGroupMembersProto
	3,  // 7: io.afloatdb.admin.proto.RaftNodeReportProto.committedMembers:type_name -> io.afloatdb.admin.proto.RaftGroupMembersProto
	3,  // 8: io.afloatdb.admin.proto.RaftNodeReportProto.effectiveMembers:type_name -> io.afloatdb.admin.proto.RaftGroupMembersProto
	0,  // 9: io.afloatdb.admin.proto.RaftNodeReportProto.role:type_name -> io.afloatdb.admin.proto.RaftRoleProto
	2,  // 10: io.afloatdb.admin.proto.RaftNodeReportProto.status:type_name -> io.afloatdb.admin.proto.RaftNodeStatusProto
	4,  // 11: io.afloatdb.admin.proto.RaftNodeReportProto.term:type_name -> io.afloatdb.admin.proto.RaftTermProto
	5,  // 12: io.afloatdb.admin.proto.RaftNodeReportProto.log:type_name -> io.afloatdb.admin.proto.RaftLogStatsProto
	6,  // 13: io.afloatdb.admin.proto.GetRaftNodeReportResponse.report:type_name -> io.afloatdb.admin.proto.RaftNodeReportProto
	18, // 14: io.afloatdb.admin.proto.GetRaftNodeReportResponse.endpointAddress:type_name -> io.afloatdb.admin.proto.GetRaftNodeReportResponse.EndpointAddressEntry
	19, // 15: io.afloatdb.admin.proto.AddRaftEndpointAddressRequest.endpoint:type_name -> io.afloatdb.raft.proto.RaftEndpointProto
	19, // 16: io.afloatdb.admin.proto.AddRaftEndpointRequest.endpoint:type_name -> io.afloatdb.raft.proto.RaftEndpointProto
	19, // 17: io.afloatdb.admin.proto.RemoveRaftEndpointRequest.endpoint:type_name -> io.afloatdb.raft.proto.RaftEndpointProto
	6,  // 18: io.afloatdb.admin.proto.TakeSnapshotResponse.report:type_name -> io.afloatdb.admin.proto.RaftNodeReportProto
	7,  // 19: io.afloatdb.admin.proto.AdminService.getRaftNodeReport:input_type -> io.afloatdb.admin.proto.GetRaftNodeReportRequest
	9,  // 20: io.afloatdb.admin.proto.AdminService.addRaftEndpointAddress:input_type -> io.afloatdb.admin.proto.AddRaftEndpointAddressRequest
	11, // 21: io.afloatdb.admin.proto.AdminService.addRaftEndpoint:input_type -> io.afloatdb.admin.proto.AddRaftEndpointRequest
	13, // 22: io.afloatdb.admin.proto.AdminService.removeRaftEndpoint:input_type -> io.afloatdb.admin.proto.RemoveRaftEndpointRequest
	15, // 23: io.afloatdb.admin.proto.AdminService.takeSnapshot:input_type -> io.afloatdb.admin.proto.TakeSnapshotRequest
	8,  // 24: io.afloatdb.admin.proto.AdminService.getRaftNodeReport:output_type -> io.afloatdb.admin.proto.GetRaftNodeReportResponse
	10, // 25: io.afloatdb.admin.proto.AdminService.addRaftEndpointAddress:output_type -> io.afloatdb.admin.proto.AddRaftEndpointAddressResponse
	12, // 26: io.afloatdb.admin.proto.AdminService.addRaftEndpoint:output_type -> io.afloatdb.admin.proto.AddRaftEndpointResponse
	14, // 27: io.afloatdb.admin.proto.AdminService.removeRaftEndpoint:output_type -> io.afloatdb.admin.proto.RemoveRaftEndpointResponse
	16, // 28: io.afloatdb.admin.proto.AdminService.takeSnapshot:output_type -> io.afloatdb.admin.proto.TakeSnapshotResponse
	24, // [24:29] is the sub-list for method output_type
	19, // [19:24] is the sub-list for method input_type
	19, // [19:19] is the sub-list for extension type_name
	19, // [19:19] is the sub-list for extension extendee
	0,  // [0:19] is the sub-list for field type_name
}

func init() { file_AfloatDBAdmin_proto_init() }
func file_AfloatDBAdmin_proto_init() {
	if File_AfloatDBAdmin_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_AfloatDBAdmin_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RaftGroupMembersProto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_AfloatDBAdmin_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RaftTermProto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_AfloatDBAdmin_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RaftLogStatsProto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_AfloatDBAdmin_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RaftNodeReportProto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_AfloatDBAdmin_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetRaftNodeReportRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_AfloatDBAdmin_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetRaftNodeReportResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_AfloatDBAdmin_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddRaftEndpointAddressRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_AfloatDBAdmin_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddRaftEndpointAddressResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_AfloatDBAdmin_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddRaftEndpointRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_AfloatDBAdmin_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddRaftEndpointResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_AfloatDBAdmin_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoveRaftEndpointRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_AfloatDBAdmin_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoveRaftEndpointResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_AfloatDBAdmin_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TakeSnapshotRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_AfloatDBAdmin_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TakeSnapshotResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_AfloatDBAdmin_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   16,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_AfloatDBAdmin_proto_goTypes,
		DependencyIndexes: file_AfloatDBAdmin_proto_depIdxs,
		EnumInfos:         file_AfloatDBAdmin_proto_enumTypes,
		MessageInfos:      file_AfloatDBAdmin_proto_msgTypes,
	}.Build()
	File_AfloatDBAdmin_proto = out.File
	file_AfloatDBAdmin_proto_rawDesc = nil
	file_AfloatDBAdmin_proto_goTypes = nil
	file_AfloatDBAdmin_proto_depIdxs = nil
}
