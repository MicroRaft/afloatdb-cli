// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: AfloatDBAdmin.proto

package admin

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AdminServiceClient is the client API for AdminService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AdminServiceClient interface {
	// Fetches the RaftNodeReport object from the RaftNode object running
	// inside an AfloatDB server
	GetRaftNodeReport(ctx context.Context, in *GetRaftNodeReportRequest, opts ...grpc.CallOption) (*GetRaftNodeReportResponse, error)
	// Adds the given RaftEndpoint -> address mapping to a AfloatDB server.
	// Before adding a new AfloatDB server is added to an AfloatDB cluster, its
	// RaftEndpoint's address must be added to all running AfloatDB servers.
	AddRaftEndpointAddress(ctx context.Context, in *AddRaftEndpointAddressRequest, opts ...grpc.CallOption) (*AddRaftEndpointAddressResponse, error)
	// Adds a new server to the AfloatDB cluster. The new AfloatDB
	// server is represented by the RaftEndpoint present in the request.
	// Once this API call succeeds, the given AfloatDB server is added to the
	// cluster, i.e., it will be contacted by the other servers.
	// If an exception or an uxpected failure occurs, the caller should get
	// the RaftNodeReport via #getRaftNodeReport() API above and check if the
	// given server has been added to the cluster or not, and retry if needed.
	AddRaftEndpoint(ctx context.Context, in *AddRaftEndpointRequest, opts ...grpc.CallOption) (*AddRaftEndpointResponse, error)
	// Removes the given server from the AfloatDB cluster. Once this call
	// succeeds, the server is removed from the cluster.
	// If an exception or an uxpected failure occurs, the caller should get the
	// RaftNodeReport via #getRaftNodeReport() API above and check if the given
	// server has been removed from the cluster or not, and retry if needed.
	RemoveRaftEndpoint(ctx context.Context, in *RemoveRaftEndpointRequest, opts ...grpc.CallOption) (*RemoveRaftEndpointResponse, error)
	TakeSnapshot(ctx context.Context, in *TakeSnapshotRequest, opts ...grpc.CallOption) (*TakeSnapshotResponse, error)
}

type adminServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAdminServiceClient(cc grpc.ClientConnInterface) AdminServiceClient {
	return &adminServiceClient{cc}
}

func (c *adminServiceClient) GetRaftNodeReport(ctx context.Context, in *GetRaftNodeReportRequest, opts ...grpc.CallOption) (*GetRaftNodeReportResponse, error) {
	out := new(GetRaftNodeReportResponse)
	err := c.cc.Invoke(ctx, "/io.afloatdb.admin.proto.AdminService/getRaftNodeReport", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) AddRaftEndpointAddress(ctx context.Context, in *AddRaftEndpointAddressRequest, opts ...grpc.CallOption) (*AddRaftEndpointAddressResponse, error) {
	out := new(AddRaftEndpointAddressResponse)
	err := c.cc.Invoke(ctx, "/io.afloatdb.admin.proto.AdminService/addRaftEndpointAddress", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) AddRaftEndpoint(ctx context.Context, in *AddRaftEndpointRequest, opts ...grpc.CallOption) (*AddRaftEndpointResponse, error) {
	out := new(AddRaftEndpointResponse)
	err := c.cc.Invoke(ctx, "/io.afloatdb.admin.proto.AdminService/addRaftEndpoint", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) RemoveRaftEndpoint(ctx context.Context, in *RemoveRaftEndpointRequest, opts ...grpc.CallOption) (*RemoveRaftEndpointResponse, error) {
	out := new(RemoveRaftEndpointResponse)
	err := c.cc.Invoke(ctx, "/io.afloatdb.admin.proto.AdminService/removeRaftEndpoint", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) TakeSnapshot(ctx context.Context, in *TakeSnapshotRequest, opts ...grpc.CallOption) (*TakeSnapshotResponse, error) {
	out := new(TakeSnapshotResponse)
	err := c.cc.Invoke(ctx, "/io.afloatdb.admin.proto.AdminService/takeSnapshot", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AdminServiceServer is the server API for AdminService service.
// All implementations must embed UnimplementedAdminServiceServer
// for forward compatibility
type AdminServiceServer interface {
	// Fetches the RaftNodeReport object from the RaftNode object running
	// inside an AfloatDB server
	GetRaftNodeReport(context.Context, *GetRaftNodeReportRequest) (*GetRaftNodeReportResponse, error)
	// Adds the given RaftEndpoint -> address mapping to a AfloatDB server.
	// Before adding a new AfloatDB server is added to an AfloatDB cluster, its
	// RaftEndpoint's address must be added to all running AfloatDB servers.
	AddRaftEndpointAddress(context.Context, *AddRaftEndpointAddressRequest) (*AddRaftEndpointAddressResponse, error)
	// Adds a new server to the AfloatDB cluster. The new AfloatDB
	// server is represented by the RaftEndpoint present in the request.
	// Once this API call succeeds, the given AfloatDB server is added to the
	// cluster, i.e., it will be contacted by the other servers.
	// If an exception or an uxpected failure occurs, the caller should get
	// the RaftNodeReport via #getRaftNodeReport() API above and check if the
	// given server has been added to the cluster or not, and retry if needed.
	AddRaftEndpoint(context.Context, *AddRaftEndpointRequest) (*AddRaftEndpointResponse, error)
	// Removes the given server from the AfloatDB cluster. Once this call
	// succeeds, the server is removed from the cluster.
	// If an exception or an uxpected failure occurs, the caller should get the
	// RaftNodeReport via #getRaftNodeReport() API above and check if the given
	// server has been removed from the cluster or not, and retry if needed.
	RemoveRaftEndpoint(context.Context, *RemoveRaftEndpointRequest) (*RemoveRaftEndpointResponse, error)
	TakeSnapshot(context.Context, *TakeSnapshotRequest) (*TakeSnapshotResponse, error)
	mustEmbedUnimplementedAdminServiceServer()
}

// UnimplementedAdminServiceServer must be embedded to have forward compatible implementations.
type UnimplementedAdminServiceServer struct {
}

func (UnimplementedAdminServiceServer) GetRaftNodeReport(context.Context, *GetRaftNodeReportRequest) (*GetRaftNodeReportResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRaftNodeReport not implemented")
}
func (UnimplementedAdminServiceServer) AddRaftEndpointAddress(context.Context, *AddRaftEndpointAddressRequest) (*AddRaftEndpointAddressResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddRaftEndpointAddress not implemented")
}
func (UnimplementedAdminServiceServer) AddRaftEndpoint(context.Context, *AddRaftEndpointRequest) (*AddRaftEndpointResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddRaftEndpoint not implemented")
}
func (UnimplementedAdminServiceServer) RemoveRaftEndpoint(context.Context, *RemoveRaftEndpointRequest) (*RemoveRaftEndpointResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveRaftEndpoint not implemented")
}
func (UnimplementedAdminServiceServer) TakeSnapshot(context.Context, *TakeSnapshotRequest) (*TakeSnapshotResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TakeSnapshot not implemented")
}
func (UnimplementedAdminServiceServer) mustEmbedUnimplementedAdminServiceServer() {}

// UnsafeAdminServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AdminServiceServer will
// result in compilation errors.
type UnsafeAdminServiceServer interface {
	mustEmbedUnimplementedAdminServiceServer()
}

func RegisterAdminServiceServer(s grpc.ServiceRegistrar, srv AdminServiceServer) {
	s.RegisterService(&AdminService_ServiceDesc, srv)
}

func _AdminService_GetRaftNodeReport_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRaftNodeReportRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).GetRaftNodeReport(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/io.afloatdb.admin.proto.AdminService/getRaftNodeReport",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).GetRaftNodeReport(ctx, req.(*GetRaftNodeReportRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_AddRaftEndpointAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddRaftEndpointAddressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).AddRaftEndpointAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/io.afloatdb.admin.proto.AdminService/addRaftEndpointAddress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).AddRaftEndpointAddress(ctx, req.(*AddRaftEndpointAddressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_AddRaftEndpoint_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddRaftEndpointRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).AddRaftEndpoint(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/io.afloatdb.admin.proto.AdminService/addRaftEndpoint",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).AddRaftEndpoint(ctx, req.(*AddRaftEndpointRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_RemoveRaftEndpoint_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveRaftEndpointRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).RemoveRaftEndpoint(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/io.afloatdb.admin.proto.AdminService/removeRaftEndpoint",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).RemoveRaftEndpoint(ctx, req.(*RemoveRaftEndpointRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_TakeSnapshot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TakeSnapshotRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).TakeSnapshot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/io.afloatdb.admin.proto.AdminService/takeSnapshot",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).TakeSnapshot(ctx, req.(*TakeSnapshotRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AdminService_ServiceDesc is the grpc.ServiceDesc for AdminService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AdminService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "io.afloatdb.admin.proto.AdminService",
	HandlerType: (*AdminServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "getRaftNodeReport",
			Handler:    _AdminService_GetRaftNodeReport_Handler,
		},
		{
			MethodName: "addRaftEndpointAddress",
			Handler:    _AdminService_AddRaftEndpointAddress_Handler,
		},
		{
			MethodName: "addRaftEndpoint",
			Handler:    _AdminService_AddRaftEndpoint_Handler,
		},
		{
			MethodName: "removeRaftEndpoint",
			Handler:    _AdminService_RemoveRaftEndpoint_Handler,
		},
		{
			MethodName: "takeSnapshot",
			Handler:    _AdminService_TakeSnapshot_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "AfloatDBAdmin.proto",
}
